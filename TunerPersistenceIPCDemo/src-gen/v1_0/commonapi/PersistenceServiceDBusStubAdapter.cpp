/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1_0/commonapi/PersistenceService.hpp>
#include <v1_0/commonapi/PersistenceServiceDBusStubAdapter.hpp>

namespace v1_0 {
namespace commonapi {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createPersistenceServiceDBusStubAdapter(
                   const CommonAPI::DBus::DBusAddress &_address,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
                   const std::shared_ptr<CommonAPI::StubBase> &_stub) {
    return std::make_shared<PersistenceServiceDBusStubAdapter>(_address, _connection, _stub);
}

INITIALIZER(registerPersistenceServiceDBusStubAdapter) {
    CommonAPI::DBus::Factory::get()->registerStubAdapterCreateMethod(
    	PersistenceService::getInterface(), &createPersistenceServiceDBusStubAdapter);
}

PersistenceServiceDBusStubAdapterInternal::~PersistenceServiceDBusStubAdapterInternal() {
    deactivateManagedInstances();
    PersistenceServiceDBusStubAdapterHelper::deinit();
}

void PersistenceServiceDBusStubAdapterInternal::deactivateManagedInstances() {

}

const char* PersistenceServiceDBusStubAdapterInternal::getMethodsDBusIntrospectionXmlData() const {
    static const std::string introspectionData =
        "<method name=\"getInterfaceVersion\">\n"
            "<arg name=\"value\" type=\"uu\" direction=\"out\" />"
        "</method>\n"
        "<method name=\"store\">\n"
            "<arg name=\"_key\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_value\" type=\"s\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"load\">\n"
            "<arg name=\"_key\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"_value\" type=\"s\" direction=\"out\" />\n"
        "</method>\n"

    ;
    return introspectionData.c_str();
}

CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        ::v1_0::commonapi::PersistenceServiceStub,
        CommonAPI::Version
        > PersistenceServiceDBusStubAdapterInternal::getPersistenceServiceInterfaceVersionStubDispatcher(&PersistenceServiceStub::getInterfaceVersion, "uu");




CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::PersistenceServiceStub,
    std::tuple<std::string, std::string>,
    std::tuple<>,
    std::tuple<CommonAPI::DBus::StringDeployment, CommonAPI::DBus::StringDeployment>,
    std::tuple<>
    
    > PersistenceServiceDBusStubAdapterInternal::storeStubDispatcher(
    &PersistenceServiceStub::store, "",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr), static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple());

CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ::v1_0::commonapi::PersistenceServiceStub,
    std::tuple<std::string>,
    std::tuple<std::string>,
    std::tuple<CommonAPI::DBus::StringDeployment>,
    std::tuple<CommonAPI::DBus::StringDeployment>
    
    > PersistenceServiceDBusStubAdapterInternal::loadStubDispatcher(
    &PersistenceServiceStub::load, "s",
					std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)),
                	std::make_tuple(static_cast<CommonAPI::DBus::StringDeployment*>(nullptr)));





const PersistenceServiceDBusStubAdapterHelper::StubDispatcherTable& PersistenceServiceDBusStubAdapterInternal::getStubDispatcherTable() {
    return stubDispatcherTable_;
}

const CommonAPI::DBus::StubAttributeTable& PersistenceServiceDBusStubAdapterInternal::getStubAttributeTable() {
    return stubAttributeTable_;
}

PersistenceServiceDBusStubAdapterInternal::PersistenceServiceDBusStubAdapterInternal(
        const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
	: CommonAPI::DBus::DBusStubAdapter(_address, _connection,false),
      PersistenceServiceDBusStubAdapterHelper(_address, _connection, std::dynamic_pointer_cast<PersistenceServiceStub>(_stub), false),
      stubDispatcherTable_({
            { { "store", "ss" }, &commonapi::PersistenceServiceDBusStubAdapterInternal::storeStubDispatcher },
            { { "load", "s" }, &commonapi::PersistenceServiceDBusStubAdapterInternal::loadStubDispatcher }
            }),
        stubAttributeTable_() {

    stubDispatcherTable_.insert({ { "getInterfaceVersion", "" }, &commonapi::PersistenceServiceDBusStubAdapterInternal::getPersistenceServiceInterfaceVersionStubDispatcher });
}

bool PersistenceServiceDBusStubAdapterInternal::hasFreedesktopProperties() {
    return false;
}

} // namespace commonapi
} // namespace v1_0
