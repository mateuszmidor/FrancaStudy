/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.3.v201507280808.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <v1_0/commonapi/PersistenceServiceStubDefault.hpp>
#include <assert.h>

namespace v1_0 {
namespace commonapi {

PersistenceServiceStubDefault::PersistenceServiceStubDefault():
        remoteEventHandler_(this),
        interfaceVersion_(PersistenceService::getInterfaceVersion()) {
}

const CommonAPI::Version& PersistenceServiceStubDefault::getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
    return interfaceVersion_;
}

PersistenceServiceStubRemoteEvent* PersistenceServiceStubDefault::initStubAdapter(const std::shared_ptr<PersistenceServiceStubAdapter> &_adapter) {
    CommonAPI::Stub<PersistenceServiceStubAdapter, PersistenceServiceStubRemoteEvent>::stubAdapter_ = _adapter;
    return &remoteEventHandler_;
}


void PersistenceServiceStubDefault::store(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _key, std::string _value, storeReply_t _reply) {
    _reply();
}

void PersistenceServiceStubDefault::load(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _key, loadReply_t _reply) {
    std::string value = "";
    _reply(value);
}




PersistenceServiceStubDefault::RemoteEventHandler::RemoteEventHandler(PersistenceServiceStubDefault *_defaultStub)
    : 
      defaultStub_(_defaultStub) {
}

} // namespace commonapi
} // namespace v1_0
